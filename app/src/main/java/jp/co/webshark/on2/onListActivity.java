package jp.co.webshark.on2;import android.app.Activity;import android.app.AlertDialog;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.IntentFilter;import android.content.res.Resources;import android.graphics.Bitmap;import android.graphics.Color;import android.graphics.drawable.BitmapDrawable;import android.os.AsyncTask;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.text.Html;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.MotionEvent;import android.view.View;import android.view.ViewGroup;import android.view.inputmethod.InputMethodManager;import android.widget.BaseAdapter;import android.widget.Button;import android.widget.EditText;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.ListView;import android.widget.RelativeLayout;import android.widget.ScrollView;import android.widget.TextView;import java.util.ArrayList;import java.util.HashMap;import jp.co.webshark.on2.customViews.DetectableKeyboardEventLayout;import jp.co.webshark.on2.customViews.EffectImageView;import jp.co.webshark.on2.customViews.HttpImageView;import jp.co.webshark.on2.customViews.SwipeListView;import jp.co.webshark.on2.customViews.UpdateReceiver;import jp.co.webshark.on2.customViews.WrapTextView;public class onListActivity extends commonActivity{//public class onListActivity extends Activity{    private RelativeLayout mainLayout;    private SwipeListView listView1;    private SwipeListView listView2;    private ScrollView scrollView;    private RelativeLayout nothingView;    private TextView nothingText1;    private TextView nothingText2;    private ArrayList<clsFriendInfo> onList;    private ArrayList<clsFriendInfo> logList;    //private AsyncPost onGetter;    //private AsyncPost hiSender;    //private AsyncPost flgSender;    //private AsyncPost badgeInfoGetter;    private String sendIndex;    private int listType;    private InputMethodManager inputMethodManager;    private boolean openKeyBoard;    private UpdateReceiver upReceiver;    private IntentFilter intentFilter;    private boolean keepList;    //private boolean isDestroy = false;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_on_list);        //画面全体のレイアウト        mainLayout = (RelativeLayout)findViewById(R.id.mainLayout);        //キーボード表示を制御するためのオブジェクト        inputMethodManager = (InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);        // 画面上のオブジェクト        listView1 = (SwipeListView) findViewById(R.id.listView1);        listView2 = (SwipeListView) findViewById(R.id.listView2);        nothingText1 = (TextView) findViewById(R.id.blank1);        nothingText2 = (TextView) findViewById(R.id.blank2);        scrollView = (ScrollView) findViewById(R.id.scroll_body);        nothingView = (RelativeLayout) findViewById(R.id.nothingLayout);        nothingView.setVisibility(View.GONE);        listView1.setVisibility(View.GONE);        listView2.setVisibility(View.GONE);        DetectableKeyboardEventLayout root = (DetectableKeyboardEventLayout)findViewById(R.id.body);        root.setKeyboardListener(new DetectableKeyboardEventLayout.KeyboardListener() {            @Override            public void onKeyboardShown() {                //Log.d(TAG, "keyboard shown");                openKeyBoard = true;            }            @Override            public void onKeyboardHidden() {                if (openKeyBoard) {                    openKeyBoard = false;                }            }        });        ((TextView) findViewById(R.id.tabHiButtonBadge)).setVisibility(View.GONE);        upReceiver = new UpdateReceiver();        intentFilter = new IntentFilter();        intentFilter.addAction("UPDATE_ACTION");        registerReceiver(upReceiver, intentFilter);        upReceiver.registerHandler(updateHandler);        keepList = false;    }    @Override    public void onResume(){        System.gc();        super.onResume();        // 画面初期化時にAPIから取得・描画する分はここで        this.getOnList();        this.clearOnBadge();        this.getBadgeInfo();    }    @Override    public void onDestroy(){        super.onDestroy();        if( upReceiver != null ){            unregisterReceiver(upReceiver);        }        this.nothingView = null;        this.listView1 = null;        this.listView2 = null;        this.onList = null;        this.scrollView = null;        this.mainLayout = null;        System.gc();    }    private void getOnList(){        int user_id = commonFucntion.getUserID(this.getApplicationContext());        String strURL = getResources().getString(R.string.api_url);        HashMap<String,String> body = new HashMap<String,String>();        body.put("entity", "getOnList");        body.put("user_id", String.valueOf(user_id));        // プロフィール取得用API通信のコールバック        AsyncPost onGetter = new AsyncPost(new AsyncCallback() {            public void onPreExecute() {}            public void onProgressUpdate(int progress) {}            public void onCancelled() {}            public void onPostExecute(String result) {                // JSON文字列をユーザ情報クラスに変換して画面書き換えをコールする                if(!isDestroy){                    listView1.closeOpenedItems();                    listView2.closeOpenedItems();                    drawOnList(clsJson2Objects.setOnList(result));                    drawOnLog(clsJson2Objects.setOnLog(result));                }            }        });        // API通信のPOST処理        onGetter.setParams(strURL, body);        onGetter.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);    }    private void sendHi(String sendHiIndex, int listType){        int user_id = commonFucntion.getUserID(this.getApplicationContext());        String friendId;        if( listType == View.VISIBLE ){            friendId = this.onList.get(Integer.parseInt(sendHiIndex)).getFriendId();        }else{            friendId = this.logList.get(Integer.parseInt(sendHiIndex)).getFriendId();        }        String strURL = getResources().getString(R.string.api_url);        HashMap<String,String> body = new HashMap<String,String>();        body.put("entity", "sendHi");        body.put("user_id", String.valueOf(user_id));        body.put("friend_id", friendId);        body.put("profile_comment", profileComment);        // プロフィール取得用API通信のコールバック        AsyncPost hiSender = new AsyncPost(new AsyncCallback() {            public void onPreExecute() {}            public void onProgressUpdate(int progress) {}            public void onCancelled() {}            public void onPostExecute(String result) {                // JSON文字列をユーザ情報クラスに変換して画面書き換えをコールする            }        });        // API通信のPOST処理        hiSender.setParams(strURL, body);        hiSender.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);    }    private void sendDeBlock(String sendIndex, int listType){        int user_id = commonFucntion.getUserID(this.getApplicationContext());        String friendId;        if( listType == View.VISIBLE ){            friendId = this.onList.get(Integer.parseInt(sendIndex)).getFlagsFriendId();        }else{            friendId = this.logList.get(Integer.parseInt(sendIndex)).getFlagsFriendId();        }        String strURL = getResources().getString(R.string.api_url);        HashMap<String,String> body = new HashMap<String,String>();        body.put("entity", "blockOff");        body.put("user_id", String.valueOf(user_id));        body.put("friend_id", friendId);        // ブロックフラグ送信用API通信のコールバック        AsyncPost flgSender = new AsyncPost(new AsyncCallback() {            public void onPreExecute() {}            public void onProgressUpdate(int progress) {}            public void onCancelled() {}            public void onPostExecute(String result) {                // JSON文字列をユーザ情報クラスに変換して画面書き換えをコールする                //drawGroupInfo(clsJson2Objects.setGroupInfo(result));                if(!isDestroy){                    getOnList();                }                //setFlgSender();            }        });        // API通信のPOST処理        flgSender.setParams(strURL, body);        flgSender.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);    }    private void drawOnList(ArrayList<clsFriendInfo> list){        FriendsAdapter adapter = new FriendsAdapter(onListActivity.this);        int cellHeight = getResources().getDimensionPixelSize(R.dimen.on_list_cell_height);        this.onList = list;        if( list.size() > 0 ) {            //nothingView.setVisibility(View.GONE);            //scrollView.setVisibility(View.VISIBLE);            listView1.setVisibility(View.VISIBLE);            nothingText1.setVisibility(View.GONE);            adapter.setFriendList(list);            listView1.setAdapter(adapter);            adapter.notifyDataSetChanged();            // 実際のListViewに反映する            ViewGroup.LayoutParams params = listView1.getLayoutParams();            params.height = list.size() * cellHeight;            listView1.setLayoutParams(params);            listView1.requestLayout();            adapter.notifyDataSetChanged();            if(!keepList){                scrollView.fullScroll(ScrollView.FOCUS_UP);            }        }else{            //nothingView.setVisibility(View.VISIBLE);            //scrollView.setVisibility(View.GONE);            listView1.setVisibility(View.GONE);            nothingText1.setVisibility(View.VISIBLE);        }        //this.setOnGetter();    }    private void drawOnLog(ArrayList<clsFriendInfo> list){        FriendsAdapter adapter = new FriendsAdapter(onListActivity.this);        int cellHeight = getResources().getDimensionPixelSize(R.dimen.on_list_cell_height);        this.logList = list;        if( list.size() > 0 ) {            //nothingView.setVisibility(View.GONE);            //scrollView.setVisibility(View.VISIBLE);            listView2.setVisibility(View.VISIBLE);            nothingText2.setVisibility(View.GONE);            adapter.setFriendList(list);            listView2.setAdapter(adapter);            adapter.notifyDataSetChanged();            // 実際のListViewに反映する            ViewGroup.LayoutParams params = listView2.getLayoutParams();            params.height = list.size() * cellHeight;            listView2.setLayoutParams(params);            listView2.requestLayout();            adapter.notifyDataSetChanged();            if(!keepList){                scrollView.fullScroll(ScrollView.FOCUS_UP);            }        }else{            //nothingView.setVisibility(View.VISIBLE);            //scrollView.setVisibility(View.GONE);            listView2.setVisibility(View.GONE);            nothingText2.setVisibility(View.VISIBLE);        }        keepList = false;        //this.setOnGetter();    }    private void getBadgeInfo(){        int user_id = commonFucntion.getUserID(this.getApplicationContext());        String strURL = getResources().getString(R.string.api_url);        HashMap<String,String> body = new HashMap<String,String>();        body.put("entity", "getTagBadgeCount");        body.put("user_id", String.valueOf(user_id));        AsyncPost badgeInfoGetter = new AsyncPost(new AsyncCallback() {            public void onPreExecute() {}            public void onProgressUpdate(int progress) {}            public void onCancelled() {}            public void onPostExecute(String result) {                // JSON文字列をユーザ情報クラスに変換して画面書き換えをコールする                if(!isDestroy){                    String onCount = clsJson2Objects.getElement(result,"on_count");                    String hiCount = clsJson2Objects.getElement(result,"hi_count");                    drawBadgeInfo(onCount, hiCount);                    //setBadgeInfoGetter();                }            }        });        // API通信のPOST処理        badgeInfoGetter.setParams(strURL, body);        badgeInfoGetter.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);    }    private void clearOnBadge(){        int user_id = commonFucntion.getUserID(this.getApplicationContext());        String strURL = getResources().getString(R.string.api_url);        HashMap<String,String> body = new HashMap<String,String>();        body.put("entity", "CommitBudgeCount");        body.put("user_id", String.valueOf(user_id));        body.put("badge_type", "2");        // プロフィール取得用API通信のコールバック        AsyncPost hiSender = new AsyncPost(new AsyncCallback() {            public void onPreExecute() {}            public void onProgressUpdate(int progress) {}            public void onCancelled() {}            public void onPostExecute(String result) {                // JSON文字列をユーザ情報クラスに変換して画面書き換えをコールする                //drawHiList(clsJson2Objects.setUserInfo(result));                //setHiSender();            }        });        // API通信のPOST処理(hiSenderを借りる)        hiSender.setParams(strURL, body);        hiSender.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);    }    private void drawBadgeInfo(String onCount, String hiCount){        if( !hiCount.equals("0") && !hiCount.equals("") ){            ((TextView) findViewById(R.id.tabHiButtonBadge)).setText(hiCount);            ((TextView) findViewById(R.id.tabHiButtonBadge)).setVisibility(View.VISIBLE);        }else{            ((TextView) findViewById(R.id.tabHiButtonBadge)).setVisibility(View.GONE);        }    }    private class FriendsAdapter extends BaseAdapter {        Context context;        LayoutInflater layoutInflater = null;        ArrayList<clsFriendInfo> friendList;        public FriendsAdapter(Context context){            this.context = context;            this.layoutInflater = (LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);        }        public void setFriendList(ArrayList<clsFriendInfo> friendList) {            this.friendList = friendList;        }        @Override        public int getCount() {            return friendList.size();        }        @Override        public Object getItem(int position) {            return null;        }        @Override        public long getItemId(int position) {            return 0;        }        @Override        public View getView(int position, View convertView, ViewGroup parent) {            convertView = layoutInflater.inflate(R.layout.on_list_view_cell01,parent,false);            //((TextView)convertView.findViewById(R.id.cellOnName)).setText(friendList.get(position).getName());            ((WrapTextView)convertView.findViewById(R.id.cellOnComment)).setText(friendList.get(position).getProfileComment());            ((TextView)convertView.findViewById(R.id.cellHiddenIndex)).setText(Integer.toString(position));            ((TextView)convertView.findViewById(R.id.cellHiddenIndexBack)).setText(Integer.toString(position));            if( friendList.get(position).getNickName().equals("") ){                ((TextView)convertView.findViewById(R.id.cellOnName)).setText(friendList.get(position).getName());                ((TextView)convertView.findViewById(R.id.cellOnNameBack)).setText(friendList.get(position).getName());            }else{                ((TextView)convertView.findViewById(R.id.cellOnName)).setText(friendList.get(position).getNickName());                ((TextView)convertView.findViewById(R.id.cellOnNameBack)).setText(friendList.get(position).getNickName());            }            if( ((String)friendList.get(position).getType()).equals("1") ){                ((TextView)convertView.findViewById(R.id.cellHiddenIndex)).setVisibility(View.VISIBLE);                ((TextView)convertView.findViewById(R.id.cellHiddenIndexBack)).setVisibility(View.VISIBLE);            }else{                ((TextView)convertView.findViewById(R.id.cellHiddenIndex)).setVisibility(View.INVISIBLE);                ((TextView)convertView.findViewById(R.id.cellHiddenIndexBack)).setVisibility(View.INVISIBLE);                convertView.setBackgroundColor(getResources().getColor(R.color.color_log_bg_gray));            }            HttpImageView profImage = (HttpImageView) convertView.findViewById(R.id.cellOnProfileImage);            profImage.setImageUrl(friendList.get(position).getImageURL(),parent.getResources().getDimensionPixelSize(R.dimen.on_list_cell_image), parent.getContext(),true);            try {                long onUpdateTime = Long.parseLong(friendList.get(position).getOnUpdateTime());                if( onUpdateTime/(24*60*60) > 0 ) {                    ((TextView) convertView.findViewById(R.id.cellLastOnTime)).setText(String.format(getResources().getString(R.string.lc_DaysAgo), onUpdateTime / (24 * 60 * 60)));                }else if( onUpdateTime/3600 > 0 ){                    ((TextView) convertView.findViewById(R.id.cellLastOnTime)).setText(String.format(getResources().getString(R.string.lc_HoursAgo), onUpdateTime / (60*60)));                    //((TextView)convertView.findViewById(R.id.cellLastOnTime)).setText(String.format("%d時間前",onUpdateTime/3600));                }else if( onUpdateTime/60 > 0 ){                    ((TextView) convertView.findViewById(R.id.cellLastOnTime)).setText(String.format(getResources().getString(R.string.lc_MinitsAgo), onUpdateTime / (60)));                    //((TextView)convertView.findViewById(R.id.cellLastOnTime)).setText(String.format("%d分前",onUpdateTime/60));                }else{                    ((TextView)convertView.findViewById(R.id.cellLastOnTime)).setText(getResources().getString(R.string.lc_JustNow));                    //((TextView)convertView.findViewById(R.id.cellLastOnTime)).setText("たった今");                }            } catch (NumberFormatException e) {                //return false;            }            EffectImageView targetImage = (EffectImageView)convertView.findViewById(R.id.switch_icon);            targetImage.setSwitchEffect(R.drawable.loading_hi, 2000);            if( friendList.get(position).getNotificationOffFlg().equals("00") ){                ((TextView)convertView.findViewById(R.id.cellOnName)).setCompoundDrawablesWithIntrinsicBounds(0, 0, 0, 0);                ((TextView)convertView.findViewById(R.id.cellOnNameBack)).setCompoundDrawablesWithIntrinsicBounds(0,0,0,0);                ((Button)convertView.findViewById(R.id.swipeSwitchSilent)).setText(parent.getResources().getString(R.string.listAct_doSilent));            }else{                ((TextView)convertView.findViewById(R.id.cellOnName)).setCompoundDrawablesWithIntrinsicBounds(0,0,R.drawable.list_icon_silent,0);                ((TextView)convertView.findViewById(R.id.cellOnNameBack)).setCompoundDrawablesWithIntrinsicBounds(0,0,R.drawable.list_icon_silent,0);                ((Button)convertView.findViewById(R.id.swipeSwitchSilent)).setText(parent.getResources().getString(R.string.listAct_deSilent));            }            TextView talkBadge = (TextView)convertView.findViewById(R.id.cellIconBadge);            if( friendList.get(position).getUnreadCount().equals("0") ){                talkBadge.setVisibility(View.GONE);            }else{                talkBadge.setText(friendList.get(position).getUnreadCount());                talkBadge.setVisibility(View.VISIBLE);            }            if( friendList.get(position).getBlockFlg().equals("00") ){                convertView.findViewById(R.id.switch_icon).setVisibility(View.VISIBLE);                convertView.findViewById(R.id.cellOnComment).setVisibility(View.VISIBLE);                convertView.findViewById(R.id.cellDeBlockButton).setVisibility(View.GONE);                ((Button)convertView.findViewById(R.id.swipeSwitchBlock)).setText(parent.getResources().getString(R.string.listAct_doBlock));            }else{                convertView.findViewById(R.id.switch_icon).setVisibility(View.INVISIBLE);                convertView.findViewById(R.id.cellOnComment).setVisibility(View.GONE);                convertView.findViewById(R.id.cellDeBlockButton).setVisibility(View.VISIBLE);                ((Button)convertView.findViewById(R.id.swipeSwitchBlock)).setText(parent.getResources().getString(R.string.listAct_deBlock));            }            return convertView;        }    }    // Hiボタン    private String profileComment;    public void sendHi(View view){        RelativeLayout cell = (RelativeLayout)view.getParent();        for (int i = 0 ; i < cell.getChildCount() ; i++) {            View childview = cell.getChildAt(i);            if (childview instanceof TextView) {                if( i == 0 ){                    TextView hiddenText = (TextView)childview;                    sendIndex = hiddenText.getText().toString();                    listType = hiddenText.getVisibility();                    break;                }            }        }        ((EffectImageView)view).doEffect();        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(this);        if( commonFucntion.getComment(getApplication()).equals("") ){            //setViewにてビューを設定します。            final EditText editView = new EditText(onListActivity.this);            editView.setHint(Html.fromHtml("<small><small>" + getResources().getString(R.string.homeAct_profileCommentHint) + "</small></small>"));            editView.setSingleLine();            alertDialogBuilder.setMessage("コメントを付けますか？\nあなたの居場所ややりたい事をコメントに(50文字以内)");            alertDialogBuilder.setView(editView);            alertDialogBuilder.setPositiveButton(getResources().getString(R.string.ok),                    new DialogInterface.OnClickListener() {                        @Override                        public void onClick(DialogInterface dialog, int which) {                            profileComment = editView.getText().toString();                            commonFucntion.setComment(getApplication(), profileComment);                            sendHi(sendIndex, listType);                            sendIndex = null;                            profileComment = null;                            //キーボードを隠す                            inputMethodManager.hideSoftInputFromWindow(mainLayout.getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);                            //背景にフォーカスを移す                            mainLayout.requestFocus();                            dialog.dismiss();                            dialog = null;                        }                    });            alertDialogBuilder.setCancelable(false);            AlertDialog alertDialog = alertDialogBuilder.create();            alertDialog.show();        }else{            sendHi(sendIndex, listType);            sendIndex = null;        }    }    // ブロック解除ボタン    public void deBlock(View view){        RelativeLayout cell = (RelativeLayout)view.getParent();        for (int i = 0 ; i < cell.getChildCount() ; i++) {            View childview = cell.getChildAt(i);            if (childview instanceof TextView) {                if( i == 0 ){                    TextView hiddenText = (TextView)childview;                    sendIndex = hiddenText.getText().toString();                    listType = hiddenText.getVisibility();                    break;                }            }        }        sendDeBlock(sendIndex, listType);        sendIndex = null;    }    public void openProfile(View view){        RelativeLayout cell = (RelativeLayout)view.getParent();        for (int i = 0 ; i < cell.getChildCount() ; i++) {            View childview = cell.getChildAt(i);            if (childview instanceof TextView) {                if( i == 0 ){                    TextView hiddenText = (TextView)childview;                    sendIndex = hiddenText.getText().toString();                    listType = hiddenText.getVisibility();                    break;                }            }        }        clsFriendInfo friendInfo;        if( listType == View.VISIBLE ){            friendInfo = onList.get(Integer.parseInt(sendIndex));        }else{            friendInfo = logList.get(Integer.parseInt(sendIndex));        }        onGlobal onGlobal = (onGlobal) this.getApplication();        onGlobal.setShareData("selectFrined",friendInfo);        sendIndex = null;        // 一方通行で開くだけ        Intent intent = new Intent(getApplicationContext(),friendProfileActivity.class);        startActivity(intent);    }    // セル全体    public void openTalk(View view){        RelativeLayout cell = (RelativeLayout)view;        Bitmap imageBitmap = null;        for (int i = 0 ; i < cell.getChildCount() ; i++) {            View childview = cell.getChildAt(i);            if (childview instanceof TextView) {                if( i == 0 ){                    TextView hiddenText = (TextView)childview;                    sendIndex = hiddenText.getText().toString();                    listType = hiddenText.getVisibility();                    //break;                }            }else if(childview instanceof HttpImageView){                HttpImageView friendImage = (HttpImageView)childview;                imageBitmap = ((BitmapDrawable)friendImage.getDrawable()).getBitmap();            }        }        clsFriendInfo friendInfo;        if( listType == View.VISIBLE ){            friendInfo = onList.get(Integer.parseInt(sendIndex));        }else{            friendInfo = logList.get(Integer.parseInt(sendIndex));        }        if( friendInfo.getBlockFlg().equals("00") ){            // 一方通行で開くだけ            onGlobal onGlobal = (onGlobal) this.getApplication();            onGlobal.setShareData("selectFrined",friendInfo);            onGlobal.setShareData("friendImage",imageBitmap);            sendIndex = null;            Intent intent = new Intent(getApplicationContext(),talkActivity.class);            startActivity(intent);        }    }    // ONリストボタン    public void openOnList(View view){        // 一方通行で開くだけ        Intent intent = new Intent(getApplicationContext(),onListActivity.class);        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);        startActivity(intent);        this.finish();    }    // homeボタン    public void openHome(View view){        // 一方通行で開くだけ        Intent intent = new Intent(getApplicationContext(),homeActivity.class);        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);        startActivity(intent);        this.finish();    }    // Hiリストボタン    public void openHiList(View view){        // 一方通行で開くだけ        Intent intent = new Intent(getApplicationContext(),hiListActivity.class);        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);        startActivity(intent);        this.finish();    }    // 友達リストボタン    public void openFriendList(View view){        // 一方通行で開くだけ        Intent intent = new Intent(getApplicationContext(),friendListActivity.class);        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);        startActivity(intent);        this.finish();    }    // 戻るリンク    public void backToHome(View view) {        // 一方通行で開くだけ        Intent intent = new Intent(getApplicationContext(),homeActivity.class);        startActivityForResult(intent, 0);    }    // セル全体    public void closeSwipe(View view){        listView1.closeOpenedItems();        listView2.closeOpenedItems();    }    private void sendDeBlock(String sendIndex, clsFriendInfo friendInfo){        int user_id = commonFucntion.getUserID(getApplicationContext());        String friendId = friendInfo.getFlagsFriendId();        String strURL = getResources().getString(R.string.api_url);        HashMap<String,String> body = new HashMap<String,String>();        body.put("entity", "blockOff");        body.put("user_id", String.valueOf(user_id));        body.put("friend_id", friendId);        //new commonApiConnector(getBaseContext()).requestTask(body, strURL);        // ON送信用API通信のコールバック        AsyncPost flgSender = new AsyncPost(new AsyncCallback() {            public void onPreExecute() {}            public void onProgressUpdate(int progress) {}            public void onCancelled() {}            public void onPostExecute(String result) {                // JSON文字列をユーザ情報クラスに変換して画面書き換えをコールする                if(!isDestroy){                    getOnList();                }            }        });        // API通信のPOST処理        flgSender.setParams(strURL, body);        flgSender.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);    }    private void sendDoBlock(String sendIndex, clsFriendInfo friendInfo){        int user_id = commonFucntion.getUserID(getApplicationContext());        String friendId = friendInfo.getFlagsFriendId();        String strURL = getResources().getString(R.string.api_url);        HashMap<String,String> body = new HashMap<String,String>();        body.put("entity", "blockOn");        body.put("user_id", String.valueOf(user_id));        body.put("friend_id", friendId);        // ON送信用API通信のコールバック        AsyncPost flgSender = new AsyncPost(new AsyncCallback() {            public void onPreExecute() {}            public void onProgressUpdate(int progress) {}            public void onCancelled() {}            public void onPostExecute(String result) {                // JSON文字列をユーザ情報クラスに変換して画面書き換えをコールする                if(!isDestroy){                    getOnList();                }            }        });        // API通信のPOST処理        flgSender.setParams(strURL, body);        flgSender.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);    }    private void sendDeSilent(String sendIndex, clsFriendInfo friendInfo){        int user_id = commonFucntion.getUserID(getApplicationContext());        String friendId = friendInfo.getFlagsFriendId();        String strURL = getResources().getString(R.string.api_url);        HashMap<String,String> body = new HashMap<String,String>();        body.put("entity", "notifyOn");        body.put("user_id", String.valueOf(user_id));        body.put("friend_id", friendId);        // ON送信用API通信のコールバック        AsyncPost flgSender = new AsyncPost(new AsyncCallback() {            public void onPreExecute() {}            public void onProgressUpdate(int progress) {}            public void onCancelled() {}            public void onPostExecute(String result) {                // JSON文字列をユーザ情報クラスに変換して画面書き換えをコールする                if(!isDestroy){                    getOnList();                }            }        });        // API通信のPOST処理        flgSender.setParams(strURL, body);        flgSender.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);    }    private void sendDoSilent(String sendIndex, clsFriendInfo friendInfo){        int user_id = commonFucntion.getUserID(getApplicationContext());        String friendId = friendInfo.getFlagsFriendId();        String strURL = getResources().getString(R.string.api_url);        HashMap<String,String> body = new HashMap<String,String>();        body.put("entity", "notifyOff");        body.put("user_id", String.valueOf(user_id));        body.put("friend_id", friendId);        // ON送信用API通信のコールバック        AsyncPost flgSender = new AsyncPost(new AsyncCallback() {            public void onPreExecute() {}            public void onProgressUpdate(int progress) {}            public void onCancelled() {}            public void onPostExecute(String result) {                // JSON文字列をユーザ情報クラスに変換して画面書き換えをコールする                if(!isDestroy){                    getOnList();                }            }        });        // API通信のPOST処理        flgSender.setParams(strURL, body);        flgSender.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);    }    // ブロック(解除)ボタン(裏)    clsFriendInfo fInfo;    public void swipeSwitchBlock(View view){        LinearLayout cell = (LinearLayout)view.getParent();        for (int i = 0 ; i < cell.getChildCount() ; i++) {            View childview = cell.getChildAt(i);            if (childview instanceof TextView) {                if( i == 0 ){                    TextView hiddenText = (TextView)childview;                    sendIndex = hiddenText.getText().toString();                    listType = hiddenText.getVisibility();                    break;                }            }        }        if( listType == View.VISIBLE ){            fInfo = onList.get(Integer.parseInt(sendIndex));        }else{            fInfo = logList.get(Integer.parseInt(sendIndex));        }        if( fInfo.getBlockFlg().equals("00") ){            AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(this);            alertDialogBuilder.setMessage(String.format(getResources().getString(R.string.blockConfirm), fInfo.getName()));            alertDialogBuilder.setPositiveButton(getResources().getString(R.string.ok),                    new DialogInterface.OnClickListener() {                        @Override                        public void onClick(DialogInterface dialog, int which) {                            sendDoBlock(sendIndex,fInfo);                            listView1.closeOpenedItems();                            listView2.closeOpenedItems();                            sendIndex = null;                            dialog.dismiss();                            dialog = null;                        }                    });            alertDialogBuilder.setNegativeButton(getResources().getString(R.string.cancel),                    new DialogInterface.OnClickListener() {                        @Override                        public void onClick(DialogInterface dialog, int which) {                            dialog.dismiss();                            dialog = null;                            return;                        }                    });            AlertDialog alertDialog = alertDialogBuilder.create();            alertDialog.show();        } else {            sendDeBlock(sendIndex,fInfo);            listView1.closeOpenedItems();            listView2.closeOpenedItems();            sendIndex = null;        }    }    // 非通知(解除)ボタン    public void swipeSwitchSilent(View view){        LinearLayout cell = (LinearLayout)view.getParent();        for (int i = 0 ; i < cell.getChildCount() ; i++) {            View childview = cell.getChildAt(i);            if (childview instanceof TextView) {                if( i == 0 ){                    TextView hiddenText = (TextView)childview;                    sendIndex = hiddenText.getText().toString();                    listType = hiddenText.getVisibility();                    break;                }            }        }        if( listType == View.VISIBLE ){            fInfo = onList.get(Integer.parseInt(sendIndex));        }else{            fInfo = logList.get(Integer.parseInt(sendIndex));        }        if( fInfo.getNotificationOffFlg().equals("00") ){            sendDoSilent(sendIndex,fInfo);        }else{            sendDeSilent(sendIndex,fInfo);        }        sendIndex = null;    }    @Override    public boolean dispatchKeyEvent(KeyEvent event) {        if (event.getAction()==KeyEvent.ACTION_DOWN) {            switch (event.getKeyCode()) {                case KeyEvent.KEYCODE_BACK:                    // ダイアログ表示など特定の処理を行いたい場合はここに記述                    // 親クラスのdispatchKeyEvent()を呼び出さずにtrueを返す                    return true;            }        }        return super.dispatchKeyEvent(event);    }    /**     * EditText編集時に背景をタップしたらキーボードを閉じるようにするタッチイベントの処理     */    @Override    public boolean dispatchTouchEvent(MotionEvent ev) {        //キーボードを隠す        inputMethodManager.hideSoftInputFromWindow(mainLayout.getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);        //背景にフォーカスを移す        mainLayout.requestFocus();        // キーボードが出ていた時はイベントをカット        if( openKeyBoard ){            return false;        }else {            return super.dispatchTouchEvent(ev);        }    }    @Override    public boolean onTouchEvent(MotionEvent event) {        //キーボードを隠す        inputMethodManager.hideSoftInputFromWindow(mainLayout.getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);        //背景にフォーカスを移す        mainLayout.requestFocus();        return false;    }    // サービスから値を受け取ったら動かしたい内容を書く    private Handler updateHandler = new Handler() {        @Override        public void handleMessage(Message msg) {            // 画面が生きている時はイベントを実行する            if(!isDestroy){                getBadgeInfo();                keepList = true;                getOnList();                clearOnBadge();            }        }    };}